// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String // hash
  role      Role     @default(USER) // ADMIN | USER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id         Int        @id @default(autoincrement())
  name       String
  slug       String     @unique
  categories Category[]
  products   Product[]
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String
  slug       String      @unique
  parentId   Int?
  parent     Category?   @relation("Subcategories", fields: [parentId], references: [id], onDelete: SetNull)
  children   Category[]  @relation("Subcategories")
  attributes Attribute[]
  products   Product[]
  brands     Brand[]
}

model Attribute {
  id         Int              @id @default(autoincrement())
  name       String // örn: "Renk", "Beden", "Numara"
  slug       String
  categoryId Int
  category   Category         @relation(fields: [categoryId], references: [id])
  values     AttributeValue[]
}

model Product {
  id              String           @id @default(cuid())
  brandId         Int
  categoryId      Int
  name            String
  slug            String           @unique
  sku             String?          @unique
  title           String?
  sub_title       String?
  description     String?
  stock           Int              @default(0)
  is_active       Boolean          @default(true)
  barkod          String?
  price           Float?
  desi            String           @default("1")
  brand           Brand            @relation(fields: [brandId], references: [id], onDelete: NoAction)
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  variants        ProductVariant[]
  AttributeValues AttributeValue[]
  images          ProductImage[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model AttributeValue {
  id              Int              @id @default(autoincrement())
  productId       String
  attributeId     Int
  value           String // örn: "Mavi", "L", "128GB" 
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute       Attribute        @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  productVariants ProductVariant[]

  @@unique([productId, attributeId, value])
}

model ProductVariant {
  id            String           @id @default(cuid())
  productId     String
  price         Float
  sku           String?          @unique
  title         String?
  subtitle      String?
  description   String?
  variant_code  String?
  combination   Json?
  stock         Int              @default(0)
  barkod        String?
  desi          String?
  is_active     Boolean          @default(true)
  is_default    Boolean          @default(true)
  product       Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes    AttributeValue[]
  images        VariantImage[]
  variantPrices VariantPrice[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([productId, sku])
}

model VariantPrice {
  id            String         @id @default(cuid())
  variantId     String
  marketplaceId Int
  vatRate       Int            @default(18)
  currency      String         @default("TRY")
  salePrice     Float
  listPrice     Float?
  discountPrice Float?
  costPrice     Float?
  //piyasa fiyati
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  marketplace   Marketplace    @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([variantId, marketplaceId])
}

model Marketplace {
  id            Int            @id @default(autoincrement())
  name          String         @unique // e.g. "Trendyol"
  code          String         @unique // e.g. "TRENDYOL"
  logoUrl       String? // UI için
  description   String? // Admin panelde gösterilecek alt açıklama
  apiUrl        String? // Entegrasyon için
  apiKey        String? // Gizli anahtar (şifrelenebilir)
  currency      String         @default("TRY") // Pazaryerinin yerel para birimi
  active        Boolean        @default(true) // Aktif mi?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  extraInfo     Json?
  variantPrices VariantPrice[]
}

model ProductImage {
  id           String         @id @default(cuid())
  productId    String
  url          String
  alt          String?
  order        Int            @default(0)
  product      Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  VariantImage VariantImage[]
}

model VariantImage {
  id             String         @id @default(cuid())
  variantId      String
  image          ProductImage   @relation(fields: [productImageId], references: [id])
  variant        ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  productImageId String
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}
