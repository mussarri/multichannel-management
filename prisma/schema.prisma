// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  password           String // hash
  role               Role                @default(USER) // ADMIN | USER
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  MarketplaceAccount MarketplaceAccount?
}

model Brand {
  id         Int        @id @default(autoincrement())
  name       String
  slug       String     @unique
  categories Category[]
  products   Product[]
}

model Category {
  id                         Int                          @id @default(autoincrement())
  name                       String
  slug                       String                       @unique
  parentId                   Int?
  parent                     Category?                    @relation("Subcategories", fields: [parentId], references: [id], onDelete: SetNull)
  children                   Category[]                   @relation("Subcategories")
  attributes                 Attribute[]
  products                   Product[]
  brands                     Brand[]
  MarketplaceCategoryMapping MarketplaceCategoryMapping[]
}

model Attribute {
  id         Int              @id @default(autoincrement())
  name       String // örn: "Renk", "Beden", "Numara"
  slug       String
  categoryId Int
  category   Category         @relation(fields: [categoryId], references: [id])
  values     AttributeValue[]

  ProductVariantAttribute ProductVariantAttribute[]
}

model AttributeValue {
  id                      Int                       @id @default(autoincrement())
  attributeId             Int
  value                   String // örn: "Mavi", "L", "128GB" 
  products                Product[]
  attribute               Attribute                 @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  productVariants         ProductVariant[]
  ProductVariantAttribute ProductVariantAttribute[]

  @@unique([attributeId, value])
}

model Product {
  id                        String                      @id @default(cuid())
  brandId                   Int
  categoryId                Int
  name                      String
  slug                      String                      @unique
  sku                       String?                     @unique
  title                     String?
  sub_title                 String?
  description               String?
  barkod                    String?
  salePrice                 Float
  costPrice                 Float?
  listPrice                 Float?
  stock                     Int                         @default(0)
  is_active                 Boolean                     @default(true)
  desi                      String                      @default("1")
  brand                     Brand                       @relation(fields: [brandId], references: [id], onDelete: NoAction)
  category                  Category                    @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  variants                  ProductVariant[]
  AttributeValues           AttributeValue[]
  images                    ProductImage[]
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  MarketplaceProductMapping MarketplaceProductMapping[]
}

model ProductVariant {
  id                               String                             @id @default(cuid())
  productId                        String
  salePrice                        Float
  costPrice                        Float?
  listPrice                        Float?
  sku                              String?                            @unique
  title                            String?
  subtitle                         String?
  description                      String?
  variant_code                     String?
  combination                      Json?
  stock                            Int                                @default(0)
  barkod                           String?
  desi                             String?
  is_active                        Boolean                            @default(true)
  is_default                       Boolean                            @default(true)
  product                          Product                            @relation(fields: [productId], references: [id], onDelete: Cascade)
  images                           ProductImage[]
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  AttributeValue                   AttributeValue[]
  MarketplaceProductVariantMapping MarketplaceProductVariantMapping[]

  @@unique([productId, sku])
}

model Marketplace {
  id                               Int                                @id @default(autoincrement())
  slug                             String                             @unique // trendyol, hepsiburada
  name                             String                             @unique // e.g. "Trendyol"
  logoUrl                          String? // UI için
  description                      String? // Admin panelde gösterilecek alt açıklama
  marketplaceAccountId             String?                            @unique
  SyncLog                          SyncLog[]
  MarketplaceProductVariantMapping MarketplaceProductVariantMapping[]
  MarketplaceAccount               MarketplaceAccount[]
  MarketplaceCategoryMapping       MarketplaceCategoryMapping[]

  @@unique([id, marketplaceAccountId])
  @@unique([slug, marketplaceAccountId])
}

//local ile marketplace kategori eslestirme
model MarketplaceCategoryMapping {
  id                 String      @id @default(cuid())
  localCategoryId    Int // kendi sistemindeki kategori
  marketplaceId      Int // trendyol, hb, vb.
  remoteCategoryId   String // pazaryerindeki kategori ID’si
  remoteCategoryName String
  marketplace        Marketplace @relation(fields: [marketplaceId], references: [id])
  category           Category    @relation(fields: [localCategoryId], references: [id])

  @@unique([localCategoryId, marketplaceId])
}

//marketin kategori attributeleri orn: giyim: renk, beden
model MarketplaceCategoryAttribute {
  id               String  @id @default(cuid())
  marketplaceId    String
  remoteCategoryId String
  name             String // Örn: Renk
  attributeId      String // Pazaryerinin ID'si
  isRequired       Boolean
  values           Json // ["Kırmızı", "Mavi", ...]
}

//prodyct varyantinin attribute değerleri:
model ProductVariantAttribute {
  id               Int    @id @default(autoincrement())
  variantId        String
  attributeId      Int
  attributeValueId Int

  attribute      Attribute      @relation(fields: [attributeId], references: [id])
  attributeValue AttributeValue @relation(fields: [attributeValueId], references: [id])
}

//Her ürünün pazaryerine uygun attribute değer eşleşmeleri:
model ProductAttributeValueMapping {
  id                   String @id @default(cuid())
  productId            String
  marketplaceAccountId String
  attributeId          String // pazaryerinin attribute id'si
  value                String // örn: "Mavi"
}

//marketplacin bilgileri
model MarketplaceAccount {
  id            String      @id @default(cuid())
  marketplaceId Int         @unique
  userId        String?     @unique
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName     String
  apiKey        String
  secretKey     String
  sellerId      String?
  supplierId    String?
  accessToken   String?
  refreshToken  String?
  role_name     String?
  role_password String?
  marketPlace   Marketplace @relation(fields: [marketplaceId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([id, marketplaceId])
  @@unique([storeName, marketplaceId])
}

//marketplace ile urun eslestirme

model MarketplaceProductMapping {
  id                   String   @id @default(cuid())
  productId            String
  marketplaceId        Int?
  product              Product  @relation(fields: [productId], references: [id])
  marketplaceAccountId String   @unique
  externalProductId    String? // eşleştirme yapılırsa
  salePrice            Float
  listPrice            Float
  stock                Int
  status               Status
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([productId, marketplaceAccountId])
}

//product varyanti ile marketplace ürünü eşleştirme
model MarketplaceProductVariantMapping {
  id                   Int            @id @default(autoincrement())
  variantId            String
  marketplaceId        Int
  marketplace          Marketplace    @relation(fields: [marketplaceId], references: [id]) // Trendyol, HB, N11 gibi
  marketplaceSku       String? // Pazaryeri tarafında oluşturulan SKU
  marketplaceProductId String? // Pazaryerindeki ürün ID’si
  salePrice            Decimal? // Pazaryerine özel fiyat
  listPrice            Decimal? // Pazaryerine özel fiyat
  stock                Int? // Pazaryerine özel stok
  syncedAt             DateTime?
  status               SyncStatus     @default(PENDING)
  errorMessage         String?
  variant              ProductVariant @relation(fields: [variantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  variantId String?
  alt       String?
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  ProductVariant ProductVariant[]
}

model SyncLog {
  id            Int         @id @default(autoincrement())
  variantId     String?
  productId     String?
  marketplaceId Int
  marketplace   Marketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)
  action        SyncAction // CONNECT | CATEGORY_MAPPING | VARIANT_SYNC | PRODUCT_SYNC
  status        SyncStatus  @default(PENDING)
  errorMessage  String?
  syncedAt      DateTime?
  payload       Json? // Gönderilen veri
  response      Json? // Gelen cevap
  createdAt     DateTime    @default(now())
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}

enum Status {
  DRAFT
  PUBLISHED
  FAILED
  UPDATED
}

enum SyncAction {
  CONNECT
  CATEGORY_MAPPING
  VARIANT_SYNC
  PRODUCT_SYNC
}

enum SyncStatus {
  PENDING
  SUCCESS
  FAILED
}
