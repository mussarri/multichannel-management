// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  password           String // hash
  role               Role                @default(USER) // ADMIN | USER
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  MarketplaceAccount MarketplaceAccount?
}

model Brand {
  id         Int        @id @default(autoincrement())
  name       String
  slug       String     @unique
  categories Category[]
  products   Product[]
}

model Category {
  id                         Int                          @id @default(autoincrement())
  name                       String
  slug                       String                       @unique
  parentId                   Int?
  parent                     Category?                    @relation("Subcategories", fields: [parentId], references: [id], onDelete: SetNull)
  children                   Category[]                   @relation("Subcategories")
  attributes                 Attribute[]
  products                   Product[]
  brands                     Brand[]
  MarketplaceCategoryMapping MarketplaceCategoryMapping[]
}

model Attribute {
  id                       Int                        @id @default(autoincrement())
  name                     String // örn: "Renk", "Beden", "Numara"
  slug                     String                     @unique
  category                 Category[]
  values                   AttributeValue[]
  ProductVariantAttribute  ProductVariantAttribute[]
  CategoryAttributeMapping CategoryAttributeMapping[]
}

model AttributeValue {
  id                      Int                       @id @default(autoincrement())
  attributeId             Int
  name                    String
  value                   String
  attribute               Attribute                 @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  products                Product[]
  productVariants         ProductVariant[]
  ProductVariantAttribute ProductVariantAttribute[]
  AttributeValueMapping   AttributeValueMapping[]

  @@unique([attributeId, value])
}

model Product {
  id                        String                      @id @default(cuid())
  brandId                   Int
  categoryId                Int
  name                      String
  slug                      String                      @unique
  sku                       String?                     @unique
  title                     String?
  sub_title                 String?
  description               String?
  barkod                    String?
  salePrice                 Float
  costPrice                 Float?
  listPrice                 Float?
  stock                     Int                         @default(0)
  is_active                 Boolean                     @default(true)
  desi                      Float                       @default(1)
  brand                     Brand                       @relation(fields: [brandId], references: [id], onDelete: NoAction)
  category                  Category                    @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  variants                  ProductVariant[]
  AttributeValues           AttributeValue[]
  images                    ProductImage[]
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  MarketplaceProductMapping MarketplaceProductMapping[]
  OrderItem                 OrderItem[]
  WarehouseStock            WarehouseStock[]
}

model ProductVariant {
  id                               String                             @id @default(cuid())
  productId                        String
  salePrice                        Float
  costPrice                        Float?
  listPrice                        Float?
  sku                              String?                            @unique
  title                            String?
  subtitle                         String?
  description                      String?
  variant_code                     String?
  combination                      Json?
  desi                             String?
  stock                            Int                                @default(0)
  barkod                           String?
  is_active                        Boolean                            @default(true)
  is_default                       Boolean                            @default(true)
  product                          Product                            @relation(fields: [productId], references: [id], onDelete: Cascade)
  images                           ProductImage[]
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  attributeValues                  AttributeValue[]
  MarketplaceProductVariantMapping MarketplaceProductVariantMapping[]
  OrderItem                        OrderItem[]

  @@unique([productId, sku])
}

model Marketplace {
  id                               Int                                @id @default(autoincrement())
  slug                             String                             @unique // trendyol, hepsiburada
  name                             String                             @unique // e.g. "Trendyol"
  logoUrl                          String? // UI için
  description                      String? // Admin panelde gösterilecek alt açıklama
  marketplaceAccountId             String?                            @unique
  SyncLog                          SyncLog[]
  marketplaceAccount               MarketplaceAccount[]
  MarketplaceProductVariantMapping MarketplaceProductVariantMapping[]
  marketplaceCategoryMapping       MarketplaceCategoryMapping[]
  categoryAttributeMapping         CategoryAttributeMapping[]
  attributeValueMapping            AttributeValueMapping[]
  Order                            Order[]

  @@unique([id, marketplaceAccountId])
  @@unique([slug, marketplaceAccountId])
}

//local ile marketplace kategori eslestirme
model MarketplaceCategoryMapping {
  id                 String      @id @default(cuid())
  localCategoryId    Int // kendi sistemindeki kategori
  marketplaceId      Int // trendyol, hb, vb.
  remoteCategoryId   String // pazaryerindeki kategori ID’si
  remoteCategoryName String
  marketplace        Marketplace @relation(fields: [marketplaceId], references: [id])
  category           Category    @relation(fields: [localCategoryId], references: [id], onDelete: Cascade)

  @@unique([marketplaceId, localCategoryId])
}

// Attribute bazında eşleme
model CategoryAttributeMapping {
  id                  String      @id @default(cuid())
  marketplaceId       Int
  localAttributeId    Int
  remoteAttributeId   String
  remoteAttributeName String?
  localCategoryId     Int
  remoteCategoryId    String
  marketplace         Marketplace @relation(fields: [marketplaceId], references: [id])
  attribute           Attribute   @relation(fields: [localAttributeId], references: [id], onDelete: Cascade)

  @@unique([marketplaceId, localAttributeId, remoteAttributeId, localCategoryId, remoteCategoryId])
}

model AttributeValueMapping {
  // Attribute value bazında eşleme
  id                    String         @id @default(cuid())
  marketplaceId         Int
  localAttributeValueId Int
  remoteValueId         String
  remoteValueName       String?
  marketplace           Marketplace    @relation(fields: [marketplaceId], references: [id])
  attributeValue        AttributeValue @relation(fields: [localAttributeValueId], references: [id])

  @@unique([marketplaceId, localAttributeValueId, remoteValueId])
}

//prodyct varyantinin attribute değerleri:
model ProductVariantAttribute {
  id               Int    @id @default(autoincrement())
  variantId        String
  attributeId      Int
  attributeValueId Int

  attribute      Attribute      @relation(fields: [attributeId], references: [id])
  attributeValue AttributeValue @relation(fields: [attributeValueId], references: [id])
}

//marketplacin bilgileri
model MarketplaceAccount {
  id            String      @id @default(cuid())
  marketplaceId Int         @unique
  userId        String?     @unique
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName     String?
  apiKey        String?
  secretKey     String
  sellerId      String?
  supplierId    String?
  accessToken   String?
  refreshToken  String?
  role_name     String?
  role_password String?
  marketPlace   Marketplace @relation(fields: [marketplaceId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([id, marketplaceId])
  @@unique([storeName, marketplaceId])
}

//marketplace ile urun eslestirme

model MarketplaceProductMapping {
  id                   String   @id @default(cuid())
  productId            String
  marketplaceId        Int?
  product              Product  @relation(fields: [productId], references: [id])
  marketplaceAccountId String   @unique
  externalProductId    String? // eşleştirme yapılırsa
  salePrice            Float
  listPrice            Float
  stock                Int
  status               Status
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([productId, marketplaceAccountId])
}

//product varyanti ile marketplace ürünü eşleştirme
model MarketplaceProductVariantMapping {
  id                   Int            @id @default(autoincrement())
  variantId            String
  marketplaceId        Int
  marketplace          Marketplace    @relation(fields: [marketplaceId], references: [id]) // Trendyol, HB, N11 gibi
  marketplaceSku       String? // Pazaryeri tarafında oluşturulan SKU
  marketplaceProductId String? // Pazaryerindeki ürün ID’si
  salePrice            Decimal? // Pazaryerine özel fiyat
  listPrice            Decimal? // Pazaryerine özel fiyat
  stock                Int? // Pazaryerine özel stok
  syncedAt             DateTime?
  status               SyncStatus     @default(PENDING)
  errorMessage         String?
  variant              ProductVariant @relation(fields: [variantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  variantId String?
  alt       String?
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  ProductVariant ProductVariant[]
}

model SyncLog {
  id            Int         @id @default(autoincrement())
  variantId     String?
  productId     String?
  marketplaceId Int
  marketplace   Marketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)
  action        SyncAction // CONNECT | CATEGORY_MAPPING | VARIANT_SYNC | PRODUCT_SYNC
  status        SyncStatus  @default(PENDING)
  errorMessage  String?
  syncedAt      DateTime?
  payload       Json? // Gönderilen veri
  response      Json? // Gelen cevap
  createdAt     DateTime    @default(now())
}

//order

model Order {
  id          String  @id @default(cuid())
  orderNumber String // Pazaryerine ait sipariş numarası
  note        String?

  // enum: TRENDYOL, HEPSIBURADA, SHOPIFY, etc.
  //accountId    String // Hangi mağaza/hesap bu siparişi aldı
  status       OrderStatus // enum: PENDING, SHIPPED, CANCELLED, etc.
  orderDate    DateTime
  deliveryDate DateTime? // Kargo tahmini/gerçek teslim tarihi

  orderItems OrderItem[] // Sipariş ürünleri

  totalPrice Float
  currency   String @default("TRY")

  shippingCode    String? // Kargo takip no
  shippingCarrier String? // Aras, Yurtiçi, MNG vb.

  customer   Customer @relation(fields: [customerId], references: [id]) // Müşteri bilgileri
  customerId String

  address           DeliveryAddress @relation(fields: [deliveryAddressId], references: [id]) // Adres bilgileri
  deliveryAddressId String

  marketplace   Marketplace @relation(fields: [marketplaceId], references: [id])
  marketplaceId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Invoice   Invoice[]

  @@unique([marketplaceId, orderNumber])
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String? // Sistemimizdeki ürünle eşleşirse
  product   Product? @relation(fields: [productId], references: [id])

  variantId String? // Ürünün ürünüyle eşleşirse
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  name     String
  quantity Int
  price    Float?
  currency String @default("TRY")
}

model DeliveryAddress {
  id                   String  @id @default(cuid())
  name                 String
  addressDetail        String?
  email                String?
  countryCode          String?
  phoneNumber          String?
  alternatePhoneNumber String?
  town                 String?
  district             String?
  city                 String?
  Order                Order[]
}

model Customer {
  id    String  @id @default(cuid())
  name  String
  email String? @unique
  phone String?
  Order Order[]
}

model Invoice {
  id             Int             @id @default(autoincrement())
  type           InvoiceType // MANUAL, E_FATURA, E_ARSIV
  invoiceNumber  String // Manuelde elle, e-Fatura'da sistem üretir
  issueDate      DateTime        @default(now()) // Fatura tarihi
  invoiceProfile InvoiceProfile? // e-Fatura'da zorunlu (TEMELFATURA vb.)

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // SATIŞ TARAFI (Seller Info)
  sellerName      String? // GİB zorunlu: Firma adı
  sellerVkn       String? // 10 haneli VKN
  sellerTckn      String? // 11 haneli TCKN
  sellerTaxOffice String? // Vergi dairesi
  sellerAddress   String? // Adres

  // MÜŞTERİ TARAFI (Buyer Info)
  buyerName      String // Firma/kişi adı
  buyerVkn       String? // 10 haneli VKN
  buyerTckn      String? // 11 haneli TCKN
  buyerTaxOffice String? // Vergi dairesi
  buyerAddress   String? // Adres

  // TUTARLAR
  currency      String   @default("TRY")
  subtotal      Decimal  @db.Decimal(10, 2) // Ara toplam
  taxTotal      Decimal  @db.Decimal(10, 2) // KDV toplam
  discountTotal Decimal? @db.Decimal(10, 2)
  totalAmount   Decimal  @db.Decimal(10, 2) // Genel toplam

  // DURUM & DOSYALAR
  status InvoiceStatus @default(PENDING) // PENDING, SENT, CANCELLED
  xmlUrl String? // e-Fatura XML linki
  pdfUrl String? // PDF linki

  // LOG
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  items InvoiceItem[]
}

model InvoiceItem {
  id        Int     @id @default(autoincrement())
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  productCode String? // SKU veya GTIP kodu
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(10, 2)
  taxRate     Decimal  @db.Decimal(5, 2) // KDV oranı %
  discount    Decimal? @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2) // Vergi dahil kalem toplamı
}

model Warehouse {
  id        String           @id @default(cuid())
  name      String
  address   String?
  stocks    WarehouseStock[]
  createdAt DateTime         @default(now())
}

model WarehouseStock {
  id          Int    @id @default(autoincrement())
  warehouseId String
  productId   String
  quantity    Int

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([warehouseId, productId])
}

enum InvoiceType {
  MANUAL
  E_FATURA
  E_ARSIV
}

enum InvoiceStatus {
  PENDING
  SENT
  CANCELLED
}

enum InvoiceProfile {
  TEMELFATURA
  TICARIFATURA
}

enum OrderStatus {
  PENDING
  PICKING
  INVOICED
  SHIPPED
  DELIVERED
  CANCELLED
  UNSUPLIED
  UNDELIVERED
  RETURNED
  ATCOLLECTIONPOINT
  UNPACKED
}

enum Role {
  ADMIN
  USER
}

enum Status {
  DRAFT
  PUBLISHED
  FAILED
  UPDATED
}

enum SyncAction {
  CONNECT
  CATEGORY_MAPPING
  VARIANT_SYNC
  PRODUCT_SYNC
  CATEGORY_ATTRIBUTE_MAPPING
  ATTRIBUTE_VALUE_MAPPING
}

enum SyncStatus {
  PENDING
  SUCCESS
  FAILED
}
