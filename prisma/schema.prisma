// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String // hash
  role      Role     @default(USER) // ADMIN | USER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  categoryIds Int[]
  categories  Category[]
  products    Product[]
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String
  slug       String      @unique
  parentId   Int?
  parent     Category?   @relation("Subcategories", fields: [parentId], references: [id])
  children   Category[]  @relation("Subcategories")
  attributes Attribute[]
  products   Product[]
  brands     Brand[]
}

model Attribute {
  id         Int              @id @default(autoincrement())
  name       String // örn: "Renk", "Beden", "Numara"
  slug       String
  categoryId Int
  category   Category         @relation(fields: [categoryId], references: [id])
  values     AttributeValue[]
}

model Product {
  id              String           @id @default(cuid())
  brandId         Int
  categoryId      Int
  sku             String?          @unique
  title           String?
  sub_title       String?
  description     String?
  stock           Int              @default(0)
  is_active       Boolean          @default(true)
  barkod          String
  price           Float
  desi            String           @default("1")
  brand           Brand            @relation(fields: [brandId], references: [id])
  category        Category         @relation(fields: [categoryId], references: [id])
  variants        ProductVariant[]
  AttributeValues AttributeValue[]
  images          ProductImage[]
}

model AttributeValue {
  id              Int              @id @default(autoincrement())
  productId       String
  attributeId     Int
  value           String // örn: "Mavi", "L", "128GB" 
  product         Product          @relation(fields: [productId], references: [id])
  attribute       Attribute        @relation(fields: [attributeId], references: [id])
  productVariants ProductVariant[]

  @@unique([productId, attributeId, value])
}

model ProductVariant {
  id           String                 @id @default(cuid())
  sku          String                 @unique
  productId    String
  title        String // (örn: "Mavi - L" veya "Varsayılan")
  variant_code String?
  combination  Json?
  price        Float
  stock        Int                    @default(0)
  barkod       String?
  desi         String?
  is_active    Boolean                @default(true)
  is_default   Boolean                @default(false)
  product      Product                @relation(fields: [productId], references: [id])
  sources      ProductVariantSource[]
  attributes   AttributeValue[]
  images       VariantImage[]
}

model ProductVariantSource {
  id         String         @id @default(cuid())
  variantId  String
  source     String // örn: "trendyol"
  externalId String?
  price      Float?
  stock      Int?
  is_active  Boolean        @default(true)
  variant    ProductVariant @relation(fields: [variantId], references: [id])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])
}

model VariantImage {
  id        String         @id @default(cuid())
  variantId String
  url       String
  alt       String?
  order     Int            @default(0)
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}
